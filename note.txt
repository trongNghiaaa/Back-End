- gitignore : node_modules: để git không quản lí file naỳ

- git init
  git commit -m""


  git log
  :q  
  git checkout...,
  git checkout master


- Phân loại JS: chạy đơn luồng nhưng bên dưới có node APIs xử lí đc code bằng C++ nên hoạt động đa luồng 
- Điểm mạnh của Node JS là : 
    + xử lí bài toán về hệ thống chịu tải lớn, xử lí mượt mà
    + NodeJS có thể dùng để gọi các ứng dụng khác
- gói modules built in (cs)
- Lẹnh cập nhật
- process.argv : lấy tham số khi truyền vào (BIẾN MÔI TRƯỜNG)

- process là 1 chương trình lớn có thể tạo ra nhiều chuwogn trình con
        vd: bật VS code là là 1 process, google lên cũng là 1 process 
- child_process
    + child_process.exec : thực thi 1 câu lệnh
    + child_process.execFile : thực thi 1 file
    + child_process.folk : nhân bản
    + child_process.spawn : tạo ra 1 terminal mới  


-Buổi 3: 
 +) NoSql : ưu điểm linh động thay đổi cấu trúc , không có cấu trúc(schema) , truy xuất dữ liệu nhanh hơn , thích hợp lưu dữ liệu sơ lượng lớn
 +) mySql : thuộc loại RDBMS (),cấu trúc cứng , có tính an toàn chặt chẽ hơn ,  có cơ chế transaction , commit khi mình thay đổi data hoặc đưa vào 1 transaction nếu nhưu có lỗi mình chỉ cần gõ lệnh 
    rollback thì data sẽ trở vè như cũ , thích hợp lưu data quan trọng


    +) Mongo server : để biến máy tính của mình thành 1 cái Database
    +) Mongo shell : 
    +) Mongo compass : giao diện Database
    +) DB tool: cho mình nhiều câu lệnh hơn để backup, restrore

    -)Các bước setup cơ bản Database: 
        require('mongoose') => mongoose.connect('mongodb://127.0.0.1:27017/....') =>
        => const Schema = mongoose.Schema => const Schema = new Schema({},{collection : '...'}) => const Model = mongoose.model('tên',Schema)


        +) Collection : là 1 tập hợp các Document


    Operator trong mongoose:  
                +) Model.find({điều kiện hoặc để trống
                    usename: ...
                    password: ...              
                }) 


                +) Model.create({1 hoặc nhiều data muốn thêm })

                +) Model.updateMany({diều kiện},{giá trị cẩn thay đổi
                    key: "value"
                })      (thay đổi các phàn tử tìm thấy)
                
                +)Model.updateOne({điều kiện}, {giá trị cần thay đổi
                    key : value
                })      (thay đổi phần tử dầu tiên tìm thấy)


                +) Model.deleteMany({điểu kiện})    (nếu không có điều kiện thì xóa hết data base)

                +) model.updateMany({điều kiện},{$set : {age: 20}}).then().catch() : sửa thành giá trị mới
                +) model.updateMany({điều kiện},{$inc : {age: +- 20}}).then().catch() : tăng thêm hoặc giảm đi 20 vào age gốc      ($increase: tăng)
                 
                +) insertMany
                +) Model.find({
                    +) {$gt: ...} : lớn hơn    {$lt: ...} :  nhỏ hơn
                    +) {$gte : ...} :  lớn hơn hoặc bằng    {$lte: ...} :  nhỏ hơn hoặc bằng
                    +) /abc/ (regex): tìm data bất kì  có chứa 'abc' bên trong
                    +) $or : [dk1,dk2]: điều kiện ghép                    Vd:   $or[{age : {$gte:20}},{salary : {$lte:2000}]
                    +) $in : [...,...,...]: nằm trong các giá trị này     Vd: age: {$in : [1000,2000,3000]}
                })
                .limit() : lấy bao nhiêu phần tử
                .skip() : bỏ qua bao nhiêu phần tử trước đó tính từ phần tử đầu tiên tìm thấy 
                .sort('...') : sắp xếp



B1: Thiết kế DB
    id 
    product,
    Category,
    order,
    comment,


B2: thêm 100 sản phẩm, sửa những sản phẩm có số lượng nhỏ hơn 5 thì thêm thuộc tính : "sắp hết hàng"

B3: crawl data của 1 shop nào đó : tên , số lượng => insert vào DB



-- Middleware : là 1 function callback (request,response, next)=>{} có tác dụng 


cors ; là Middleware cho phép 

proxy: 1 con server trung gian 

Middleware: là cánh cửa trungg gian ở giữa , app.use, app.get  (req,res,next)=>{}   (err, req,res, next)=>{}
                    next(),    next(data)

Morgan: console.log ra cacs thông tin request
        stream: fs.createWriteStream('./access.log', {flag:'a'})
Express-rate-limit: giới hạn thông tin
Cors() : chính sách chia sẻ thông tin cho đối tác :web browser - check origin 
Winston: log file 

cookie: có hạn+ lưu được ít => đính kèm cùng header
webstoreage - localStorage : không hạn+ lưu được nhiều

BVN: Sử dung express-generator
        npm i -g express-generator
        express --view=ejs my-server 
        npm install
        npm start

    B2: tất cả API có query là role  = (admin, guest)
        VD: GET /product?role=admin
        nếu admin => được phép CRUD API     => 10req/1phut
        nếu guest => chỉ được dùng API xem  => 2req/1phut
    B3: server localhost:3000 => chạy file html ở liveserver localhost:5000
    trong html file ,call hoăc fetch 
    B4: xử lý lỗi với Winston

